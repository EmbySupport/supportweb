const tocData = '
<div id="sidetoggle">
  <div>
    <div class="sidefilter">
      <form class="toc-filter">
        <span class="glyphicon glyphicon-filter filter-icon"></span>
        <span class="glyphicon glyphicon-remove clear-icon" id="toc_filter_clear"></span>
        <input type="text" id="toc_filter_input" placeholder="Filter by Title" onkeypress="if(event.keyCode==13) {return false;}">
      </form>
    </div>
    <div class="sidetoc">
      <div class="toc" id="toc">
          
          <ul class="nav level1">
                <li class="nav-item">
                    <span class="expand-stub"></span>
                    <a class="nav-link" href="index.html" title="Emby Support">Emby Support</a>
                    
                    <ul class="nav level2">
                          <li class="nav-item">
                              <a class="nav-link" href="articles/Home.html" title="Wiki home">Wiki home</a>
                          </li>
                          <li class="nav-item">
                              <a class="nav-link" href="articles/Quick-Start.html" title="Quick start">Quick start</a>
                          </li>
                          <li class="nav-item">
                              <a class="nav-link" href="articles/System-Requirements.html" title="System requirements">System requirements</a>
                          </li>
                    </ul>
                </li>
                <li class="nav-item">
                    <span class="expand-stub"></span>
                    <a class="nav-link">Media organization</a>
                    
                    <ul class="nav level2">
                          <li class="nav-item">
                              <a class="nav-link" href="articles/Movie-Naming.html" title="Movie naming">Movie naming</a>
                          </li>
                          <li class="nav-item">
                              <a class="nav-link" href="articles/TV-Naming.html" title="TV naming">TV naming</a>
                          </li>
                          <li class="nav-item">
                              <a class="nav-link" href="articles/Music-naming.html" title="Music naming">Music naming</a>
                          </li>
                          <li class="nav-item">
                              <a class="nav-link" href="articles/Audio-Book-Naming.html" title="Audio Book naming">Audio Book naming</a>
                          </li>
                          <li class="nav-item">
                              <a class="nav-link" href="articles/Book-naming.html" title="Book naming">Book naming</a>
                          </li>
                          <li class="nav-item">
                              <a class="nav-link" href="articles/3D-Videos.html" title="3D videos">3D videos</a>
                          </li>
                          <li class="nav-item">
                              <a class="nav-link" href="articles/Excluding-Files-%26-Folders.html" title="Excluding files">Excluding files</a>
                          </li>
                          <li class="nav-item">
                              <a class="nav-link" href="articles/Media-stubs.html" title="Media stubs">Media stubs</a>
                          </li>
                          <li class="nav-item">
                              <a class="nav-link" href="articles/Strm-Files.html" title="Strm files">Strm files</a>
                          </li>
                          <li class="nav-item">
                              <a class="nav-link" href="articles/Subtitles.html" title="Subtitles">Subtitles</a>
                          </li>
                          <li class="nav-item">
                              <a class="nav-link" href="articles/Automatic-Subtitle-Downloads.html" title="Automatic Subtitle Downloads">Automatic Subtitle Downloads</a>
                          </li>
                          <li class="nav-item">
                              <a class="nav-link" href="articles/Manual-Subtitle-Downloads.html" title="Manual Subtitle Downloads">Manual Subtitle Downloads</a>
                          </li>
                          <li class="nav-item">
                              <a class="nav-link" href="articles/Theme-Songs-%26-Videos.html" title="Theme songs &amp; videos">Theme songs &amp; videos</a>
                          </li>
                          <li class="nav-item">
                              <a class="nav-link" href="articles/Trailers.html" title="Trailers">Trailers</a>
                          </li>
                          <li class="nav-item">
                              <a class="nav-link" href="articles/Identify.html" title="Identify">Identify</a>
                          </li>
                          <li class="nav-item">
                              <a class="nav-link" href="articles/New-Media-Date-Handling.html" title="New Media Date Handling">New Media Date Handling</a>
                          </li>
                    </ul>
                </li>
                <li class="nav-item">
                    <span class="expand-stub"></span>
                    <a class="nav-link">Server</a>
                    
                    <ul class="nav level2">
                          <li class="nav-item">
                              <a class="nav-link" href="articles/Installation.html" title="Installation">Installation</a>
                          </li>
                          <li class="nav-item">
                              <a class="nav-link" href="articles/Connectivity.html" title="Connectivity">Connectivity</a>
                          </li>
                          <li class="nav-item">
                              <a class="nav-link" href="articles/Library-Setup.html" title="Library setup">Library setup</a>
                          </li>
                          <li class="nav-item">
                              <a class="nav-link" href="articles/Optional-Network-Paths.html" title="Optional Network Paths">Optional Network Paths</a>
                          </li>
                          <li class="nav-item">
                              <a class="nav-link" href="articles/Server-Settings.html" title="Server settings">Server settings</a>
                          </li>
                          <li class="nav-item">
                              <a class="nav-link" href="articles/Log-Files.html" title="Log Files">Log Files</a>
                          </li>
                          <li class="nav-item">
                              <a class="nav-link" href="articles/Auto-Organize.html" title="Auto-Organize">Auto-Organize</a>
                          </li>
                          <li class="nav-item">
                              <a class="nav-link" href="articles/Camera-upload.html" title="Camera upload">Camera upload</a>
                          </li>
                          <li class="nav-item">
                              <a class="nav-link" href="articles/Channels.html" title="Channels">Channels</a>
                          </li>
                          <li class="nav-item">
                              <a class="nav-link" href="articles/Cinema-Intros.html" title="Cinema Intros">Cinema Intros</a>
                          </li>
                          <li class="nav-item">
                              <a class="nav-link" href="articles/Collections.html" title="Collections">Collections</a>
                          </li>
                          <li class="nav-item">
                              <a class="nav-link" href="articles/Devices.html" title="Devices">Devices</a>
                          </li>
                          <li class="nav-item">
                              <a class="nav-link" href="articles/Hosting-Settings.html" title="Hosting settings">Hosting settings</a>
                          </li>
                          <li class="nav-item">
                              <a class="nav-link" href="articles/Live-TV.html" title="Live TV">Live TV</a>
                          </li>
                          <li class="nav-item">
                              <a class="nav-link" href="articles/Notifications.html" title="Notifications">Notifications</a>
                          </li>
                          <li class="nav-item">
                              <a class="nav-link" href="articles/Plugins.html" title="Plugins">Plugins</a>
                          </li>
                          <li class="nav-item">
                              <a class="nav-link" href="articles/Scheduled-tasks.html" title="Scheduled tasks">Scheduled tasks</a>
                          </li>
                          <li class="nav-item">
                              <a class="nav-link" href="articles/Transcoding.html" title="Transcoding">Transcoding</a>
                          </li>
                          <li class="nav-item">
                              <a class="nav-link" href="articles/Backup.html" title="Backing up Emby Server">Backing up Emby Server</a>
                          </li>
                          <li class="nav-item">
                              <a class="nav-link" href="articles/Running-Emby-Server-as-a-Windows-Service.html" title="Emby Server as a Windows Service">Emby Server as a Windows Service</a>
                          </li>
                          <li class="nav-item">
                              <a class="nav-link" href="articles/Open-Subtitles.html" title="Open Subtitles">Open Subtitles</a>
                          </li>
                          <li class="nav-item">
                              <a class="nav-link" href="articles/Secure-Your-Server.html" title="Secure Your Server">Secure Your Server</a>
                          </li>
                          <li class="nav-item">
                              <a class="nav-link" href="articles/Webhooks.html" title="Webhooks">Webhooks</a>
                          </li>
                    </ul>
                </li>
                <li class="nav-item">
                    <span class="expand-stub"></span>
                    <a class="nav-link">Emby 4.0 Migration</a>
                    
                    <ul class="nav level2">
                          <li class="nav-item">
                              <a class="nav-link" href="articles/New-Folder-based-Access-Control.html" title="New Folder-based Access Control">New Folder-based Access Control</a>
                          </li>
                    </ul>
                </li>
                <li class="nav-item">
                    <span class="expand-stub"></span>
                    <a class="nav-link">Hardware Acceleration</a>
                    
                    <ul class="nav level2">
                          <li class="nav-item">
                              <a class="nav-link" href="articles/Hardware-Acceleration-Overview.html" title="Overview">Overview</a>
                          </li>
                          <li class="nav-item">
                              <a class="nav-link" href="articles/Hardware-Acceleration-on-Windows.html" title="Windows">Windows</a>
                          </li>
                          <li class="nav-item">
                              <a class="nav-link" href="articles/Hardware-Acceleration-on-Linux.html" title="Linux">Linux</a>
                          </li>
                          <li class="nav-item">
                              <a class="nav-link" href="articles/Hardware-Acceleration-on-Android.html" title="Android">Android</a>
                          </li>
                    </ul>
                </li>
                <li class="nav-item">
                    <span class="expand-stub"></span>
                    <a class="nav-link">Users</a>
                    
                    <ul class="nav level2">
                          <li class="nav-item">
                              <a class="nav-link" href="articles/Users.html" title="Users">Users</a>
                          </li>
                          <li class="nav-item">
                              <a class="nav-link" href="articles/Parental-Controls.html" title="Parental controls">Parental controls</a>
                          </li>
                          <li class="nav-item">
                              <a class="nav-link" href="articles/Passwords.html" title="Passwords">Passwords</a>
                          </li>
                          <li class="nav-item">
                              <a class="nav-link" href="articles/Content-Access.html" title="Content access">Content access</a>
                          </li>
                          <li class="nav-item">
                              <a class="nav-link" href="articles/Device-Access.html" title="Device access">Device access</a>
                          </li>
                          <li class="nav-item">
                              <a class="nav-link" href="articles/Emby-Connect.html" title="Emby Connect">Emby Connect</a>
                          </li>
                          <li class="nav-item">
                              <a class="nav-link" href="articles/Password-Reset.html" title="Emby Connect Password Reset">Emby Connect Password Reset</a>
                          </li>
                    </ul>
                </li>
                <li class="nav-item">
                    <span class="expand-stub"></span>
                    <a class="nav-link">Live TV</a>
                    
                    <ul class="nav level2">
                          <li class="nav-item">
                              <a class="nav-link" href="articles/Live-TV.md (setup.md" title="Live TV">Live TV</a>
                          </li>
                          <li class="nav-item">
                              <a class="nav-link" href="articles/Live-TV-Plugins.html" title="Live TV Plugins">Live TV Plugins</a>
                          </li>
                          <li class="nav-item">
                              <a class="nav-link" href="articles/DVR-Settings.html" title="DVR Settings">DVR Settings</a>
                          </li>
                    </ul>
                </li>
                <li class="nav-item">
                    <span class="expand-stub"></span>
                    <a class="nav-link">Emby Apps</a>
                    
                    <ul class="nav level2">
                          <li class="nav-item">
                              <a class="nav-link" href="articles/Apple-TV.html" title="Apple TV">Apple TV</a>
                          </li>
                          <li class="nav-item">
                              <a class="nav-link" href="articles/Alexa.html" title="Amazon Alexa">Amazon Alexa</a>
                          </li>
                          <li class="nav-item">
                              <a class="nav-link" href="articles/Fire-TV.html" title="Amazon Fire TV">Amazon Fire TV</a>
                          </li>
                          <li class="nav-item">
                              <a class="nav-link" href="articles/Android-Mobile.html" title="Android Mobile">Android Mobile</a>
                          </li>
                          <li class="nav-item">
                              <a class="nav-link" href="articles/Android-TV.html" title="Android TV">Android TV</a>
                          </li>
                          <li class="nav-item">
                              <a class="nav-link" href="articles/Chromecast.html" title="Chromecast">Chromecast</a>
                          </li>
                          <li class="nav-item">
                              <a class="nav-link" href="articles/Emby-Theater-for-Windows.html" title="Emby Theater for Windows">Emby Theater for Windows</a>
                          </li>
                          <li class="nav-item">
                              <a class="nav-link" href="articles/Google-Home.html" title="Google Home">Google Home</a>
                          </li>
                          <li class="nav-item">
                              <a class="nav-link" href="articles/iOS.html" title="iOS">iOS</a>
                          </li>
                          <li class="nav-item">
                              <a class="nav-link" href="articles/Roku.html" title="Roku">Roku</a>
                          </li>
                          <li class="nav-item">
                              <a class="nav-link" href="articles/Web-Client.html" title="Web App">Web App</a>
                          </li>
                          <li class="nav-item">
                              <a class="nav-link" href="articles/Keyboard-and-Remote-Support.html" title="Keyboard and Remote Support">Keyboard and Remote Support</a>
                          </li>
                    </ul>
                </li>
                <li class="nav-item">
                    <span class="expand-stub"></span>
                    <a class="nav-link">Offline Downloading</a>
                    
                    <ul class="nav level2">
                          <li class="nav-item">
                              <a class="nav-link" href="articles/Offline-Access.html" title="Offline access">Offline access</a>
                          </li>
                    </ul>
                </li>
                <li class="nav-item">
                    <span class="expand-stub"></span>
                    <a class="nav-link">Dlna</a>
                    
                    <ul class="nav level2">
                          <li class="nav-item">
                              <a class="nav-link" href="articles/Dlna-settings.html" title="Dlna settings">Dlna settings</a>
                          </li>
                          <li class="nav-item">
                              <a class="nav-link" href="articles/Dlna-profiles.html" title="Dlna profiles">Dlna profiles</a>
                          </li>
                    </ul>
                </li>
                <li class="nav-item">
                    <span class="expand-stub"></span>
                    <a class="nav-link">Sync</a>
                    
                    <ul class="nav level2">
                          <li class="nav-item">
                              <a class="nav-link" href="articles/Sync-Introduction.html" title="Sync Introduction">Sync Introduction</a>
                          </li>
                          <li class="nav-item">
                              <a class="nav-link" href="articles/Sync.html" title="Sync">Sync</a>
                          </li>
                          <li class="nav-item">
                              <a class="nav-link" href="articles/Sync-Jobs.html" title="Sync jobs">Sync jobs</a>
                          </li>
                          <li class="nav-item">
                              <a class="nav-link" href="articles/Folder-Sync.html" title="Folder sync">Folder sync</a>
                          </li>
                          <li class="nav-item">
                              <a class="nav-link" href="articles/Google-Drive.html" title="Google Drive">Google Drive</a>
                          </li>
                    </ul>
                </li>
                <li class="nav-item">
                    <span class="expand-stub"></span>
                    <a class="nav-link">Plugins</a>
                    
                    <ul class="nav level2">
                          <li class="nav-item">
                              <a class="nav-link" href="articles/Plugins.html" title="Plugins">Plugins</a>
                          </li>
                          <li class="nav-item">
                              <a class="nav-link" href="articles/AutoBoxSets.html" title="AutoBoxSets">AutoBoxSets</a>
                          </li>
                    </ul>
                </li>
                <li class="nav-item">
                    <span class="expand-stub"></span>
                    <a class="nav-link">Emby Premiere</a>
                    
                    <ul class="nav level2">
                          <li class="nav-item">
                              <a class="nav-link" href="articles/Emby-Premiere.html" title="Emby Premiere">Emby Premiere</a>
                          </li>
                          <li class="nav-item">
                              <a class="nav-link" href="articles/How-do-I-purchase-Emby-Premiere.html" title="How do I purchase?">How do I purchase?</a>
                          </li>
                          <li class="nav-item">
                              <a class="nav-link" href="articles/What-Emby-Premiere-membership-options-are-there.html" title="Membership Options">Membership Options</a>
                          </li>
                          <li class="nav-item">
                              <a class="nav-link" href="articles/Emby-Premiere-Feature-Matrix.html" title="Feature Matrix">Feature Matrix</a>
                          </li>
                          <li class="nav-item">
                              <a class="nav-link" href="articles/How-is-the-Emby-Premiere-key-delivered-to-me.html" title="How do I get my key?">How do I get my key?</a>
                          </li>
                          <li class="nav-item">
                              <a class="nav-link" href="articles/Is-My-Emby-Premiere-Key-Still-Valid-with-Emby-4.0.html" title="Is my Emby Premiere key still valid with Emby 4.0?">Is my Emby Premiere key still valid with Emby 4.0?</a>
                          </li>
                          <li class="nav-item">
                              <a class="nav-link" href="articles/What-if-I-lose-my-Emby-Premiere-key.html" title="What if I lose my key?">What if I lose my key?</a>
                          </li>
                          <li class="nav-item">
                              <a class="nav-link" href="https://github.com/MediaBrowser/Wiki/wiki/My-Emby-Key-Says-it-is-Invalid-or-Missing.md" title="My Emby Key Says it is Invalid or Missing">My Emby Key Says it is Invalid or Missing</a>
                          </li>
                          <li class="nav-item">
                              <a class="nav-link" href="articles/How-do-I-upgrade-my-Emby-Premiere-membership.html" title="How do I upgrade my membership?">How do I upgrade my membership?</a>
                          </li>
                          <li class="nav-item">
                              <a class="nav-link" href="articles/Is-there-a-limit-to-Emby-Premiere.html" title="Is there a limit to Premiere?">Is there a limit to Premiere?</a>
                          </li>
                          <li class="nav-item">
                              <a class="nav-link" href="articles/Why-is-the-Emby-Premiere-price-different-in-the-app-stores.html" title="Why is the price different in the App store?">Why is the price different in the App store?</a>
                          </li>
                          <li class="nav-item">
                              <a class="nav-link" href="articles/How-do-I-cancel-an-Emby-Premiere-subscription.html" title="How do I cancel my membership?">How do I cancel my membership?</a>
                          </li>
                          <li class="nav-item">
                              <a class="nav-link" href="articles/Can-I-use-my-Emby-Premiere-key-on-more-than-one-server.html" title="Multiple servers">Multiple servers</a>
                          </li>
                    </ul>
                </li>
                <li class="nav-item">
                    <span class="expand-stub"></span>
                    <a class="nav-link">Advanced Topics</a>
                    
                    <ul class="nav level2">
                          <li class="nav-item">
                              <a class="nav-link" href="articles/Collections-%E2%80%93-Manual-Migration.html" title="Collections &#8211; Manual Migration">Collections &#8211; Manual Migration</a>
                          </li>
                    </ul>
                </li>
          </ul>
      </div>
    </div>
  </div>
</div>';
